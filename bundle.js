(()=>{"use strict";var n={729:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,"* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: 'lato', sans-serif;\n  line-height: 1.25;\n  color: var(--clr-3);\n}\n\nbody {\n  min-height: 100vh;\n  background-color: var(--clr2);\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: normal;\n  font-family: lato-bold, sans-serif;\n  margin: 0;\n  color: var(--clr4);\n  text-transform: uppercase;\n  line-height: normal;\n}\n\nh2 {\n  font-size: 1.75em;\n  margin: 1rem 0;\n}\n\np {\n  margin: 0;\n}\n\nbutton,\n.btn {\n    margin: 0;\n    font-family: lato-bold, sans-serif;\n    font-size: 1rem;\n    line-height: normal;\n    padding: 0.55em 1.3em;\n    border: 2px solid var(--clr3);\n    color: var(--clr3);\n    background-color: transparent;\n    cursor: pointer;\n    transition: background-color .3s, color .3s;\n}\n\nbutton:hover {\n    color: var(--clr1);\n    background-color: var(--clr6);\n    border-color: var(--clr1);\n}\n\n.delete-btn:hover {\n    color: var(--clr4);\n    border-color: var(--clr4);\n    background-color: transparent;\n}\n\ninput,\ntextarea {\n  font: inherit;\n  padding: 0.2rem 0.4rem;\n  width: 100%;\n  max-width: 30rem;\n  border: 1px solid var(--clr3);\n  background-color: var(--clr2);\n}\n\ninput:focus,\ntextarea:focus {\n  outline: none;\n  background-color: var(--clr1);\n}\n\n.margin-bot{\n  margin-bottom: 0.5rem;\n}","",{version:3,sources:["webpack://./src/assets/style/basics/base.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,+BAA+B;EAC/B,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,SAAS;AACX;;AAEA;;;;;;EAME,mBAAmB;EACnB,kCAAkC;EAClC,SAAS;EACT,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,SAAS;AACX;;AAEA;;IAEI,SAAS;IACT,kCAAkC;IAClC,eAAe;IACf,mBAAmB;IACnB,qBAAqB;IACrB,6BAA6B;IAC7B,kBAAkB;IAClB,6BAA6B;IAC7B,eAAe;IACf,2CAA2C;AAC/C;;AAEA;IACI,kBAAkB;IAClB,6BAA6B;IAC7B,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,6BAA6B;AACjC;;AAEA;;EAEE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,6BAA6B;EAC7B,6BAA6B;AAC/B;;AAEA;;EAEE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;AACvB",sourcesContent:["* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: 'lato', sans-serif;\n  line-height: 1.25;\n  color: var(--clr-3);\n}\n\nbody {\n  min-height: 100vh;\n  background-color: var(--clr2);\n  margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: normal;\n  font-family: lato-bold, sans-serif;\n  margin: 0;\n  color: var(--clr4);\n  text-transform: uppercase;\n  line-height: normal;\n}\n\nh2 {\n  font-size: 1.75em;\n  margin: 1rem 0;\n}\n\np {\n  margin: 0;\n}\n\nbutton,\n.btn {\n    margin: 0;\n    font-family: lato-bold, sans-serif;\n    font-size: 1rem;\n    line-height: normal;\n    padding: 0.55em 1.3em;\n    border: 2px solid var(--clr3);\n    color: var(--clr3);\n    background-color: transparent;\n    cursor: pointer;\n    transition: background-color .3s, color .3s;\n}\n\nbutton:hover {\n    color: var(--clr1);\n    background-color: var(--clr6);\n    border-color: var(--clr1);\n}\n\n.delete-btn:hover {\n    color: var(--clr4);\n    border-color: var(--clr4);\n    background-color: transparent;\n}\n\ninput,\ntextarea {\n  font: inherit;\n  padding: 0.2rem 0.4rem;\n  width: 100%;\n  max-width: 30rem;\n  border: 1px solid var(--clr3);\n  background-color: var(--clr2);\n}\n\ninput:focus,\ntextarea:focus {\n  outline: none;\n  background-color: var(--clr1);\n}\n\n.margin-bot{\n  margin-bottom: 0.5rem;\n}"],sourceRoot:""}]);const i=o},479:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,".flex {\n  display: flex;\n  gap: .5rem\n}\n\n/* FLEX HELPERS */\n.flex.column {\n  flex-direction: column;\n}\n\n.flex.align-center {\n  align-items: center;\n}\n\n.flex.justify-center {\n  justify-content: center;\n}\n\n.flex.space-between {\n  justify-content: space-between;\n}\n /* LIST HELPERS */\n.clean-list {\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n}","",{version:3,sources:["webpack://./src/assets/style/basics/helpers.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb;AACF;;AAEA,iBAAiB;AACjB;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,8BAA8B;AAChC;CACC,iBAAiB;AAClB;EACE,SAAS;EACT,UAAU;EACV,qBAAqB;AACvB",sourcesContent:[".flex {\n  display: flex;\n  gap: .5rem\n}\n\n/* FLEX HELPERS */\n.flex.column {\n  flex-direction: column;\n}\n\n.flex.align-center {\n  align-items: center;\n}\n\n.flex.justify-center {\n  justify-content: center;\n}\n\n.flex.space-between {\n  justify-content: space-between;\n}\n /* LIST HELPERS */\n.clean-list {\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n}"],sourceRoot:""}]);const i=o},802:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,".main-layout:not(.full) {\n  display: grid;\n  grid-template-columns: 1fr 6fr 1fr;\n}\n\n.full{\n  grid-column: 1 /-1;\n}\n\n.main-layout .content{\n  grid-column: 2;\n}\n\n.list-layout:not(.full){\n  display: grid;\n  grid-template-columns: 1rem auto 1rem;\n}\n\n.list-layout > *{\n  grid-column: 2;\n}\n\n#app main {\n  margin-block-start: 2rem;\n}","",{version:3,sources:["webpack://./src/assets/style/basics/layout.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,kCAAkC;AACpC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,qCAAqC;AACvC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,wBAAwB;AAC1B",sourcesContent:[".main-layout:not(.full) {\n  display: grid;\n  grid-template-columns: 1fr 6fr 1fr;\n}\n\n.full{\n  grid-column: 1 /-1;\n}\n\n.main-layout .content{\n  grid-column: 2;\n}\n\n.list-layout:not(.full){\n  display: grid;\n  grid-template-columns: 1rem auto 1rem;\n}\n\n.list-layout > *{\n  grid-column: 2;\n}\n\n#app main {\n  margin-block-start: 2rem;\n}"],sourceRoot:""}]);const i=o},502:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,".headder {\n  background-color: var(--clr5);\n  box-shadow: 7px -6px 9px 0px var(--clr5);\n}\n\n.headder h1 {\n  padding: 1.5rem 0;\n  color: var(--clr6);\n}","",{version:3,sources:["webpack://./src/assets/style/components/headder.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,wCAAwC;AAC1C;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB",sourcesContent:[".headder {\n  background-color: var(--clr5);\n  box-shadow: 7px -6px 9px 0px var(--clr5);\n}\n\n.headder h1 {\n  padding: 1.5rem 0;\n  color: var(--clr6);\n}"],sourceRoot:""}]);const i=o},429:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,".task-form{\n    border: 3px solid var(--clr3);\n    padding: 1rem;\n}","",{version:3,sources:["webpack://./src/assets/style/components/task-form.css"],names:[],mappings:"AAAA;IACI,6BAA6B;IAC7B,aAAa;AACjB",sourcesContent:[".task-form{\n    border: 3px solid var(--clr3);\n    padding: 1rem;\n}"],sourceRoot:""}]);const i=o},238:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,".tasks li {\n    box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);\n    padding: 1rem;\n    margin-block: 1rem;\n    background: var(--clr1);\n  }\n\n  .tasks h5{\n    color: var(--clr3);\n  }","",{version:3,sources:["webpack://./src/assets/style/components/task-item.css"],names:[],mappings:"AAAA;IACI,2CAA2C;IAC3C,aAAa;IACb,kBAAkB;IAClB,uBAAuB;EACzB;;EAEA;IACE,kBAAkB;EACpB",sourcesContent:[".tasks li {\n    box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);\n    padding: 1rem;\n    margin-block: 1rem;\n    background: var(--clr1);\n  }\n\n  .tasks h5{\n    color: var(--clr3);\n  }"],sourceRoot:""}]);const i=o},506:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,'.tasks {\n  border: 3px solid var(--clr3);\n}\n\n.tasks select {\n  height: fit-content;\n  padding: 0.5rem;\n  font-family: "lato", sans-serif;\n}\n\n.tasks ul {\n  padding: 1rem;\n}\n\n#active-tasks header {\n  background-color: var(--clr5);\n}\n#active-tasks h2 {\n  color: var(--clr6);\n}\n\n#done-tasks header {\n  background-color: var(--clr6);\n}\n\n#done-tasks h2 {\n  color: var(--clr5);\n}\n\n.droppable {\n  background: var(--clr7);\n  padding-block-start: 1rem;\n}\n\n#done-tasks .droppable {\n  background: var(--clr8);\n  padding-block-start: 1rem;\n}\n',"",{version:3,sources:["webpack://./src/assets/style/components/task-list.css"],names:[],mappings:"AAAA;EACE,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,+BAA+B;AACjC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;EACvB,yBAAyB;AAC3B",sourcesContent:['.tasks {\n  border: 3px solid var(--clr3);\n}\n\n.tasks select {\n  height: fit-content;\n  padding: 0.5rem;\n  font-family: "lato", sans-serif;\n}\n\n.tasks ul {\n  padding: 1rem;\n}\n\n#active-tasks header {\n  background-color: var(--clr5);\n}\n#active-tasks h2 {\n  color: var(--clr6);\n}\n\n#done-tasks header {\n  background-color: var(--clr6);\n}\n\n#done-tasks h2 {\n  color: var(--clr5);\n}\n\n.droppable {\n  background: var(--clr7);\n  padding-block-start: 1rem;\n}\n\n#done-tasks .droppable {\n  background: var(--clr8);\n  padding-block-start: 1rem;\n}\n'],sourceRoot:""}]);const i=o},136:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,"#user-message-wraper{\n    position: fixed;\n    bottom: -20rem;\n    left: -20rem;\n    background-color: var(--clr6);\n    width: fit-content;\n    min-height: 2rem;\n    padding: 1rem;\n    transition: transform 1s ease-in-out;\n}\n\n#user-message-wraper.open{\n    transform: translate(20rem, -20rem) ;\n}\n\n#user-message-wraper h4{\n    color: var(--clr1);\n}","",{version:3,sources:["webpack://./src/assets/style/components/user-message.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,cAAc;IACd,YAAY;IACZ,6BAA6B;IAC7B,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:["#user-message-wraper{\n    position: fixed;\n    bottom: -20rem;\n    left: -20rem;\n    background-color: var(--clr6);\n    width: fit-content;\n    min-height: 2rem;\n    padding: 1rem;\n    transition: transform 1s ease-in-out;\n}\n\n#user-message-wraper.open{\n    transform: translate(20rem, -20rem) ;\n}\n\n#user-message-wraper h4{\n    color: var(--clr1);\n}"],sourceRoot:""}]);const i=o},852:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),s=t.n(r),a=t(645),o=t.n(a)()(s());o.push([n.id,":root {\n    --clr1: #ffffff;\n    --clr2: #fafafa;\n    --clr3: #8e8e8e;\n    --clr4: #444444;\n    --clr5: #2d302e;\n    --clr6: #0b9150;\n    --clr7: #0b91502e;\n    --clr8: #2d302e39;\n\n\n    --l: 980px;\n    --m: 860px;\n    --s: 740px;\n}","",{version:3,sources:["webpack://./src/assets/style/setup/variables.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,eAAe;IACf,eAAe;IACf,eAAe;IACf,eAAe;IACf,eAAe;IACf,iBAAiB;IACjB,iBAAiB;;;IAGjB,UAAU;IACV,UAAU;IACV,UAAU;AACd",sourcesContent:[":root {\n    --clr1: #ffffff;\n    --clr2: #fafafa;\n    --clr3: #8e8e8e;\n    --clr4: #444444;\n    --clr5: #2d302e;\n    --clr6: #0b9150;\n    --clr7: #0b91502e;\n    --clr8: #2d302e39;\n\n\n    --l: 980px;\n    --m: 860px;\n    --s: 740px;\n}"],sourceRoot:""}]);const i=o},150:(n,e,t)=>{t.d(e,{Z:()=>g});var r=t(537),s=t.n(r),a=t(645),o=t.n(a),i=t(729),c=t(479),l=t(802),A=t(852),d=t(506),u=t(429),p=t(238),m=t(502),h=t(136),f=o()(s());f.i(i.Z),f.i(c.Z),f.i(l.Z),f.i(A.Z),f.i(d.Z),f.i(u.Z),f.i(p.Z),f.i(m.Z),f.i(h.Z),f.push([n.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const g=f},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,s,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(o[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&o[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),s&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=s):A[4]="".concat(s)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(s," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},o=[],i=0;i<n.length;i++){var c=n[i],l=r.base?c[0]+r.base:c[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=s(p,r);r.byIndex=i,e.splice(i,0,{identifier:d,updater:m,references:1})}o.push(d)}return o}function s(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,s){var a=r(n=n||[],s=s||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var i=t(a[o]);e[i].references--}for(var c=r(n,s),l=0;l<a.length;l++){var A=t(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var s=void 0!==t.layer;s&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,s&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var s=e[r];if(void 0!==s)return s.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{class n{constructor(n,e,t,r){this.templateEl=document.getElementById(n),this.hostEl=document.getElementById(e);const s=document.importNode(this.templateEl.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(t)}attach(n){this.hostEl.insertAdjacentElement(n?"afterbegin":"beforeend",this.element)}}class e extends n{constructor(){super("user-message","app",!0),this.message=""}static getInstance(){return this.instance||(this.instance=new e),this.instance}configure(){}renderContent(){}renderMessage(n){const e=document.getElementById("message");e.innerText=n;const t=document.getElementById("user-message-wraper");t.classList.add("open"),setTimeout((()=>{e.innerText="",t.classList.remove("open")}),3e3)}}const r=e.getInstance();function s(n){let e=!0,t="Invalid Input:";const{value:s,field:a,isRequired:o,minLength:i,maxLength:c,min:l,max:A}=n;return o&&(e=e&&0!==s.toString().trim().length,t+=e?"":`\n${a} is required`),null!=i&&"string"==typeof s&&(e=e&&s.length>=i,t+=e?"":`\n${a} needs a minimun of ${i} characters`),null!=c&&"string"==typeof s&&(e=e&&s.length<=c,t+=e?"":`\n${a} can have a maximun of ${c} characters`),null!=l&&"number"==typeof s&&(e=e&&s>=l,t+=e?"":`\n${a} can have a minimun value of ${l}`),null!=A&&"number"==typeof s&&(e=e&&s<=A,t+=e?"":`\n${a} can have a maximum value of ${A}`),e||r.renderMessage(t),e}function a(n,e,t){const r=t.value;return{configurable:!0,get(){return r.bind(this)}}}var o;!function(n){n[n.Active=0]="Active",n[n.Done=1]="Done"}(o||(o={}));class i{constructor(n,e,t,r,s,a){this.title=n,this.description=e,this.priority=t,this.status=r,this.createdAt=s,this.id=a}}class c{static getInstance(){return this.instance||(this.instance=new c),this.instance}saveToStorage(n,e){const t=JSON.stringify(e);localStorage.setItem(n,t)}loadFromStorage(n){const e=localStorage.getItem(n);return e?JSON.parse(e):null}}const l=c.getInstance();function A(n=6){for(var e="",t=0;t<n;t++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}class d{constructor(){this.listeners=[]}addListener(n){this.listeners.push(n)}}class u extends d{constructor(){super(),this.tasks=[],this.STORAGE_KEY="tasksDB",this.demoTasks=[{id:A(),title:"Create your first task",description:"Check it out!",priority:1,status:o.Active,createdAt:Date.now()}]}static getInstance(){return this.instance||(this.instance=new u),this.instance}query(){this.tasks=l.loadFromStorage(this.STORAGE_KEY),this.tasks&&this.tasks.length||(this.tasks=this.demoTasks,this.updateTaskStorage(this.tasks)),this.updateListeners()}addTask(n){n.id||(n.id=A()),this.tasks.push(n),this.updateListeners(),r.renderMessage("Task Added Successfully"),this.updateTaskStorage(this.tasks)}deleteTask(n){const e=this.tasks.findIndex((e=>e.id===n));this.tasks.splice(e,1),this.updateListeners(),r.renderMessage("Task Removed Successfully"),this.updateTaskStorage(this.tasks)}moveTask(n,e){const t=this.tasks.find((e=>e.id===n));t&&t.status!==e&&(t.status=e,this.updateListeners(),this.updateTaskStorage(this.tasks))}updateListeners(){for(const n of this.listeners)n(this.tasks.slice())}updateTaskStorage(n){l.saveToStorage(this.STORAGE_KEY,n)}}const p=u.getInstance();class m{constructor(n,e,t){this.enteredTitle=n,this.enteredDescription=e,this.enteredpriority=t,this.titleValidatable={field:"title",value:this.enteredTitle,isRequired:!0},this.descriptionValidatable={field:"description",value:this.enteredDescription,isRequired:!0,minLength:5},this.priorityValidatable={field:"priority",value:this.enteredpriority,isRequired:!0,min:1,max:5}}}class h extends n{constructor(){super("task-input","task-form-wraper",!0,"user-input"),this.titleInputEl=this.element.querySelector("#title"),this.descriptionInputEl=this.element.querySelector("#description"),this.priorityInputEl=this.element.querySelector("#priority"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}gatherUserInput(){const n=this.titleInputEl.value,e=this.descriptionInputEl.value,t=+this.priorityInputEl.value,r=new m(n,e,t),{titleValidatable:a,descriptionValidatable:c,priorityValidatable:l}=r;if(s(a)&&s(c)&&s(l))return this.clearInputs(),new i(n,e,t,o.Active,Date.now())}clearInputs(){this.titleInputEl.value="",this.descriptionInputEl.value="",this.priorityInputEl.value=""}submitHandler(n){n.preventDefault();const e=this.gatherUserInput();e&&p.addTask(e)}renderContent(){}}!function(n,e,t,r){var s,a=arguments.length,o=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,r);else for(var i=n.length-1;i>=0;i--)(s=n[i])&&(o=(a<3?s(o):a>3?s(e,t,o):s(e,t))||o);a>3&&o&&Object.defineProperty(e,t,o)}([a],h.prototype,"submitHandler",null);class f extends n{constructor(n,e){super("single-task",n,!1,e.id),this.task=e,this.configure(),this.renderContent()}dragStartHandler(n){n.dataTransfer.setData("text/plain",this.task.id),n.dataTransfer.effectAllowed="move"}configure(){document.getElementById("delete-btn").id=`delete-btn-${this.task.id}`,document.getElementById(`delete-btn-${this.task.id}`).onclick=()=>this.onDeleteTask(this.task.id),this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){var n;this.element.querySelector("h3").textContent=this.task.title,this.element.querySelector("h4").textContent="Priority: "+this.task.priority,this.element.querySelector("h5").textContent=(n=this.task.createdAt,`${new Date(n).toDateString()} at ${new Date(n).getHours()}:${new Date(n).getMinutes()}`),this.element.querySelector("p").textContent=this.task.description}onDeleteTask(n){p.deleteTask(n)}dragEndHandler(n){}}!function(n,e,t,r){var s,a=arguments.length,o=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,r);else for(var i=n.length-1;i>=0;i--)(s=n[i])&&(o=(a<3?s(o):a>3?s(e,t,o):s(e,t))||o);a>3&&o&&Object.defineProperty(e,t,o)}([a],f.prototype,"dragStartHandler",null);var g=function(n,e,t,r){var s,a=arguments.length,o=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,r);else for(var i=n.length-1;i>=0;i--)(s=n[i])&&(o=(a<3?s(o):a>3?s(e,t,o):s(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o};class C extends n{constructor(n){super("task-list","lists-wraper",!1,`${n}-tasks`),this.type=n,this.assignedTasks=[],this.sortBy="",this.configure(),this.renderContent(),p.query()}dragOverHandler(n){n.dataTransfer&&"text/plain"===n.dataTransfer.types[0]&&(n.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(n){const e=n.dataTransfer.getData("text/plain");p.moveTask(e,"active"===this.type?o.Active:o.Done);const t=document.querySelectorAll("ul");for(const n of t)n.classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler);const n=document.getElementById("sortby");n.id=`sortby-${this.type}`,this.sortBy=n.value,n.addEventListener("change",(()=>this.handleSortbyChange(n.value))),p.addListener(this.renderFilterdTasks)}renderContent(){const n=`${this.type}-task-list`;this.element.querySelector("ul").id=n,this.element.querySelector("h2").textContent=this.type.toUpperCase()}renderFilterdTasks(n){const e=n.filter((n=>"active"===this.type?n.status===o.Active:n.status===o.Done));this.assignedTasks=e,this.renderTasks()}renderTasks(){document.getElementById(`${this.type}-task-list`).innerHTML="";const n=this.assignedTasks.sort(((n,e)=>"priority"===this.sortBy?n.priority-e.priority:e.createdAt-n.createdAt));for(const e of n)new f(this.element.querySelector("ul").id,e)}handleSortbyChange(n){this.sortBy=n,this.renderTasks()}dragLeaveHandler(n){}}g([a],C.prototype,"dragOverHandler",null),g([a],C.prototype,"dropHandler",null),g([a],C.prototype,"renderFilterdTasks",null);var v=t(379),B=t.n(v),E=t(795),b=t.n(E),y=t(569),k=t.n(y),x=t(565),I=t.n(x),w=t(216),S=t.n(w),T=t(589),L=t.n(T),R=t(150),j={};j.styleTagTransform=L(),j.setAttributes=I(),j.insert=k().bind(null,"head"),j.domAPI=b(),j.insertStyleElement=S(),B()(R.Z,j),R.Z&&R.Z.locals&&R.Z.locals,console.log("app.ts Working"),new h,new C("active"),new C("done")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,