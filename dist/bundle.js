(()=>{"use strict";var r={729:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,"* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  font-family: 'lato', sans-serif;\r\n  line-height: 1.25;\r\n  color: var(--clr-3);\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n  background-color: var(--clr2);\r\n  margin: 0;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  font-weight: normal;\r\n  font-family: lato-bold, sans-serif;\r\n  margin: 0;\r\n  color: var(--clr4);\r\n  text-transform: uppercase;\r\n  line-height: normal;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.75em;\r\n  margin: 1rem 0;\r\n}\r\n\r\np {\r\n  margin: 0;\r\n}\r\n\r\nbutton,\r\n.btn {\r\n    margin: 0;\r\n    font-family: lato-bold, sans-serif;\r\n    font-size: 1rem;\r\n    line-height: normal;\r\n    padding: 0.55em 1.3em;\r\n    border: 2px solid var(--clr3);\r\n    color: var(--clr3);\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    transition: background-color .3s, color .3s;\r\n}\r\n\r\nbutton:hover {\r\n    color: var(--clr1);\r\n    background-color: var(--clr6);\r\n    border-color: var(--clr1);\r\n}\r\n\r\n.delete-btn:hover {\r\n    color: var(--clr4);\r\n    border-color: var(--clr4);\r\n    background-color: transparent;\r\n}\r\n\r\ninput,\r\ntextarea {\r\n  font: inherit;\r\n  padding: 0.2rem 0.4rem;\r\n  width: 100%;\r\n  max-width: 30rem;\r\n  border: 1px solid var(--clr3);\r\n  background-color: var(--clr2);\r\n}\r\n\r\ninput:focus,\r\ntextarea:focus {\r\n  outline: none;\r\n  background-color: var(--clr1);\r\n}\r\n\r\n.margin-bot{\r\n  margin-bottom: 0.5rem;\r\n}","",{version:3,sources:["webpack://./src/assets/style/basics/base.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,+BAA+B;EAC/B,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,SAAS;AACX;;AAEA;;;;;;EAME,mBAAmB;EACnB,kCAAkC;EAClC,SAAS;EACT,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,SAAS;AACX;;AAEA;;IAEI,SAAS;IACT,kCAAkC;IAClC,eAAe;IACf,mBAAmB;IACnB,qBAAqB;IACrB,6BAA6B;IAC7B,kBAAkB;IAClB,6BAA6B;IAC7B,eAAe;IACf,2CAA2C;AAC/C;;AAEA;IACI,kBAAkB;IAClB,6BAA6B;IAC7B,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,6BAA6B;AACjC;;AAEA;;EAEE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,6BAA6B;EAC7B,6BAA6B;AAC/B;;AAEA;;EAEE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;AACvB",sourcesContent:["* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  font-family: 'lato', sans-serif;\r\n  line-height: 1.25;\r\n  color: var(--clr-3);\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n  background-color: var(--clr2);\r\n  margin: 0;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  font-weight: normal;\r\n  font-family: lato-bold, sans-serif;\r\n  margin: 0;\r\n  color: var(--clr4);\r\n  text-transform: uppercase;\r\n  line-height: normal;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.75em;\r\n  margin: 1rem 0;\r\n}\r\n\r\np {\r\n  margin: 0;\r\n}\r\n\r\nbutton,\r\n.btn {\r\n    margin: 0;\r\n    font-family: lato-bold, sans-serif;\r\n    font-size: 1rem;\r\n    line-height: normal;\r\n    padding: 0.55em 1.3em;\r\n    border: 2px solid var(--clr3);\r\n    color: var(--clr3);\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    transition: background-color .3s, color .3s;\r\n}\r\n\r\nbutton:hover {\r\n    color: var(--clr1);\r\n    background-color: var(--clr6);\r\n    border-color: var(--clr1);\r\n}\r\n\r\n.delete-btn:hover {\r\n    color: var(--clr4);\r\n    border-color: var(--clr4);\r\n    background-color: transparent;\r\n}\r\n\r\ninput,\r\ntextarea {\r\n  font: inherit;\r\n  padding: 0.2rem 0.4rem;\r\n  width: 100%;\r\n  max-width: 30rem;\r\n  border: 1px solid var(--clr3);\r\n  background-color: var(--clr2);\r\n}\r\n\r\ninput:focus,\r\ntextarea:focus {\r\n  outline: none;\r\n  background-color: var(--clr1);\r\n}\r\n\r\n.margin-bot{\r\n  margin-bottom: 0.5rem;\r\n}"],sourceRoot:""}]);const i=o},479:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,".flex {\r\n  display: flex;\r\n  gap: .5rem\r\n}\r\n\r\n/* FLEX HELPERS */\r\n.flex.column {\r\n  flex-direction: column;\r\n}\r\n\r\n.flex.align-center {\r\n  align-items: center;\r\n}\r\n\r\n.flex.justify-center {\r\n  justify-content: center;\r\n}\r\n\r\n.flex.space-between {\r\n  justify-content: space-between;\r\n}\r\n /* LIST HELPERS */\r\n.clean-list {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style-type: none;\r\n}","",{version:3,sources:["webpack://./src/assets/style/basics/helpers.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb;AACF;;AAEA,iBAAiB;AACjB;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,8BAA8B;AAChC;CACC,iBAAiB;AAClB;EACE,SAAS;EACT,UAAU;EACV,qBAAqB;AACvB",sourcesContent:[".flex {\r\n  display: flex;\r\n  gap: .5rem\r\n}\r\n\r\n/* FLEX HELPERS */\r\n.flex.column {\r\n  flex-direction: column;\r\n}\r\n\r\n.flex.align-center {\r\n  align-items: center;\r\n}\r\n\r\n.flex.justify-center {\r\n  justify-content: center;\r\n}\r\n\r\n.flex.space-between {\r\n  justify-content: space-between;\r\n}\r\n /* LIST HELPERS */\r\n.clean-list {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style-type: none;\r\n}"],sourceRoot:""}]);const i=o},802:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,".main-layout:not(.full) {\r\n  display: grid;\r\n  grid-template-columns: 1fr 6fr 1fr;\r\n}\r\n\r\n.full{\r\n  grid-column: 1 /-1;\r\n}\r\n\r\n.main-layout .content{\r\n  grid-column: 2;\r\n}\r\n\r\n.list-layout:not(.full){\r\n  display: grid;\r\n  grid-template-columns: 1rem auto 1rem;\r\n}\r\n\r\n.list-layout > *{\r\n  grid-column: 2;\r\n}\r\n\r\n#app main {\r\n  margin-block-start: 2rem;\r\n}","",{version:3,sources:["webpack://./src/assets/style/basics/layout.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,kCAAkC;AACpC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,qCAAqC;AACvC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,wBAAwB;AAC1B",sourcesContent:[".main-layout:not(.full) {\r\n  display: grid;\r\n  grid-template-columns: 1fr 6fr 1fr;\r\n}\r\n\r\n.full{\r\n  grid-column: 1 /-1;\r\n}\r\n\r\n.main-layout .content{\r\n  grid-column: 2;\r\n}\r\n\r\n.list-layout:not(.full){\r\n  display: grid;\r\n  grid-template-columns: 1rem auto 1rem;\r\n}\r\n\r\n.list-layout > *{\r\n  grid-column: 2;\r\n}\r\n\r\n#app main {\r\n  margin-block-start: 2rem;\r\n}"],sourceRoot:""}]);const i=o},502:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,".headder {\r\n  background-color: var(--clr5);\r\n  box-shadow: 7px -6px 9px 0px var(--clr5);\r\n}\r\n\r\n.headder h1 {\r\n  padding: 1.5rem 0;\r\n  color: var(--clr6);\r\n}","",{version:3,sources:["webpack://./src/assets/style/components/headder.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,wCAAwC;AAC1C;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB",sourcesContent:[".headder {\r\n  background-color: var(--clr5);\r\n  box-shadow: 7px -6px 9px 0px var(--clr5);\r\n}\r\n\r\n.headder h1 {\r\n  padding: 1.5rem 0;\r\n  color: var(--clr6);\r\n}"],sourceRoot:""}]);const i=o},429:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,".task-form{\r\n    border: 3px solid var(--clr3);\r\n    padding: 1rem;\r\n}","",{version:3,sources:["webpack://./src/assets/style/components/task-form.css"],names:[],mappings:"AAAA;IACI,6BAA6B;IAC7B,aAAa;AACjB",sourcesContent:[".task-form{\r\n    border: 3px solid var(--clr3);\r\n    padding: 1rem;\r\n}"],sourceRoot:""}]);const i=o},238:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,".tasks li {\r\n    box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);\r\n    padding: 1rem;\r\n    margin-block: 1rem;\r\n    background: var(--clr1);\r\n  }\r\n\r\n  .tasks h5{\r\n    color: var(--clr3);\r\n  }","",{version:3,sources:["webpack://./src/assets/style/components/task-item.css"],names:[],mappings:"AAAA;IACI,2CAA2C;IAC3C,aAAa;IACb,kBAAkB;IAClB,uBAAuB;EACzB;;EAEA;IACE,kBAAkB;EACpB",sourcesContent:[".tasks li {\r\n    box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);\r\n    padding: 1rem;\r\n    margin-block: 1rem;\r\n    background: var(--clr1);\r\n  }\r\n\r\n  .tasks h5{\r\n    color: var(--clr3);\r\n  }"],sourceRoot:""}]);const i=o},506:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,'.tasks {\r\n  border: 3px solid var(--clr3);\r\n}\r\n\r\n.tasks select {\r\n  height: fit-content;\r\n  padding: 0.5rem;\r\n  font-family: "lato", sans-serif;\r\n}\r\n\r\n.tasks ul {\r\n  padding: 1rem;\r\n}\r\n\r\n#active-tasks header {\r\n  background-color: var(--clr5);\r\n}\r\n#active-tasks h2 {\r\n  color: var(--clr6);\r\n}\r\n\r\n#done-tasks header {\r\n  background-color: var(--clr6);\r\n}\r\n\r\n#done-tasks h2 {\r\n  color: var(--clr5);\r\n}\r\n\r\n.droppable {\r\n  background: var(--clr7);\r\n  padding-block-start: 1rem;\r\n}\r\n\r\n#done-tasks .droppable {\r\n  background: var(--clr8);\r\n  padding-block-start: 1rem;\r\n}\r\n',"",{version:3,sources:["webpack://./src/assets/style/components/task-list.css"],names:[],mappings:"AAAA;EACE,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,+BAA+B;AACjC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;EACvB,yBAAyB;AAC3B",sourcesContent:['.tasks {\r\n  border: 3px solid var(--clr3);\r\n}\r\n\r\n.tasks select {\r\n  height: fit-content;\r\n  padding: 0.5rem;\r\n  font-family: "lato", sans-serif;\r\n}\r\n\r\n.tasks ul {\r\n  padding: 1rem;\r\n}\r\n\r\n#active-tasks header {\r\n  background-color: var(--clr5);\r\n}\r\n#active-tasks h2 {\r\n  color: var(--clr6);\r\n}\r\n\r\n#done-tasks header {\r\n  background-color: var(--clr6);\r\n}\r\n\r\n#done-tasks h2 {\r\n  color: var(--clr5);\r\n}\r\n\r\n.droppable {\r\n  background: var(--clr7);\r\n  padding-block-start: 1rem;\r\n}\r\n\r\n#done-tasks .droppable {\r\n  background: var(--clr8);\r\n  padding-block-start: 1rem;\r\n}\r\n'],sourceRoot:""}]);const i=o},136:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,"#user-message-wraper{\r\n    position: fixed;\r\n    bottom: -20rem;\r\n    left: -20rem;\r\n    background-color: var(--clr6);\r\n    width: fit-content;\r\n    min-height: 2rem;\r\n    padding: 1rem;\r\n    transition: transform 1s ease-in-out;\r\n}\r\n\r\n#user-message-wraper.open{\r\n    transform: translate(20rem, -20rem) ;\r\n}\r\n\r\n#user-message-wraper h4{\r\n    color: var(--clr1);\r\n}","",{version:3,sources:["webpack://./src/assets/style/components/user-message.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,cAAc;IACd,YAAY;IACZ,6BAA6B;IAC7B,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:["#user-message-wraper{\r\n    position: fixed;\r\n    bottom: -20rem;\r\n    left: -20rem;\r\n    background-color: var(--clr6);\r\n    width: fit-content;\r\n    min-height: 2rem;\r\n    padding: 1rem;\r\n    transition: transform 1s ease-in-out;\r\n}\r\n\r\n#user-message-wraper.open{\r\n    transform: translate(20rem, -20rem) ;\r\n}\r\n\r\n#user-message-wraper h4{\r\n    color: var(--clr1);\r\n}"],sourceRoot:""}]);const i=o},852:(r,n,e)=>{e.d(n,{Z:()=>i});var t=e(537),s=e.n(t),a=e(645),o=e.n(a)()(s());o.push([r.id,":root {\r\n    --clr1: #ffffff;\r\n    --clr2: #fafafa;\r\n    --clr3: #8e8e8e;\r\n    --clr4: #444444;\r\n    --clr5: #2d302e;\r\n    --clr6: #0b9150;\r\n    --clr7: #0b91502e;\r\n    --clr8: #2d302e39;\r\n\r\n\r\n    --l: 980px;\r\n    --m: 860px;\r\n    --s: 740px;\r\n}","",{version:3,sources:["webpack://./src/assets/style/setup/variables.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,eAAe;IACf,eAAe;IACf,eAAe;IACf,eAAe;IACf,eAAe;IACf,iBAAiB;IACjB,iBAAiB;;;IAGjB,UAAU;IACV,UAAU;IACV,UAAU;AACd",sourcesContent:[":root {\r\n    --clr1: #ffffff;\r\n    --clr2: #fafafa;\r\n    --clr3: #8e8e8e;\r\n    --clr4: #444444;\r\n    --clr5: #2d302e;\r\n    --clr6: #0b9150;\r\n    --clr7: #0b91502e;\r\n    --clr8: #2d302e39;\r\n\r\n\r\n    --l: 980px;\r\n    --m: 860px;\r\n    --s: 740px;\r\n}"],sourceRoot:""}]);const i=o},150:(r,n,e)=>{e.d(n,{Z:()=>g});var t=e(537),s=e.n(t),a=e(645),o=e.n(a),i=e(729),c=e(479),l=e(802),A=e(852),d=e(506),u=e(429),p=e(238),m=e(502),h=e(136),f=o()(s());f.i(i.Z),f.i(c.Z),f.i(l.Z),f.i(A.Z),f.i(d.Z),f.i(u.Z),f.i(p.Z),f.i(m.Z),f.i(h.Z),f.push([r.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const g=f},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,s,a){"string"==typeof r&&(r=[[null,r,void 0]]);var o={};if(t)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(o[c]=!0)}for(var l=0;l<r.length;l++){var A=[].concat(r[l]);t&&o[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),s&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=s):A[4]="".concat(s)),n.push(A))}},n}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(s," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var a={},o=[],i=0;i<r.length;i++){var c=r[i],l=t.base?c[0]+t.base:c[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var u=e(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=s(p,t);t.byIndex=i,n.splice(i,0,{identifier:d,updater:m,references:1})}o.push(d)}return o}function s(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,s){var a=t(r=r||[],s=s||{});return function(r){r=r||[];for(var o=0;o<a.length;o++){var i=e(a[o]);n[i].references--}for(var c=t(r,s),l=0;l<a.length;l++){var A=e(a[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=c}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var s=void 0!==e.layer;s&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,s&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},n={};function e(t){var s=n[t];if(void 0!==s)return s.exports;var a=n[t]={id:t,exports:{}};return r[t](a,a.exports,e),a.exports}e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),e.nc=void 0,(()=>{class r{constructor(r,n,e,t){this.templateEl=document.getElementById(r),this.hostEl=document.getElementById(n);const s=document.importNode(this.templateEl.content,!0);this.element=s.firstElementChild,t&&(this.element.id=t),this.attach(e)}attach(r){this.hostEl.insertAdjacentElement(r?"afterbegin":"beforeend",this.element)}}class n extends r{constructor(){super("user-message","app",!0),this.message=""}static getInstance(){return this.instance||(this.instance=new n),this.instance}configure(){}renderContent(){}renderMessage(r){const n=document.getElementById("message");n.innerText=r;const e=document.getElementById("user-message-wraper");e.classList.add("open"),setTimeout((()=>{n.innerText="",e.classList.remove("open")}),3e3)}}const t=n.getInstance();function s(r){let n=!0,e="Invalid Input:";const{value:s,field:a,isRequired:o,minLength:i,maxLength:c,min:l,max:A}=r;return o&&(n=n&&0!==s.toString().trim().length,e+=n?"":`\n${a} is required`),null!=i&&"string"==typeof s&&(n=n&&s.length>=i,e+=n?"":`\n${a} needs a minimun of ${i} characters`),null!=c&&"string"==typeof s&&(n=n&&s.length<=c,e+=n?"":`\n${a} can have a maximun of ${c} characters`),null!=l&&"number"==typeof s&&(n=n&&s>=l,e+=n?"":`\n${a} can have a minimun value of ${l}`),null!=A&&"number"==typeof s&&(n=n&&s<=A,e+=n?"":`\n${a} can have a maximum value of ${A}`),n||t.renderMessage(e),n}function a(r,n,e){const t=e.value;return{configurable:!0,get(){return t.bind(this)}}}var o;!function(r){r[r.Active=0]="Active",r[r.Done=1]="Done"}(o||(o={}));class i{constructor(r,n,e,t,s,a){this.title=r,this.description=n,this.priority=e,this.status=t,this.createdAt=s,this.id=a}}class c{static getInstance(){return this.instance||(this.instance=new c),this.instance}saveToStorage(r,n){const e=JSON.stringify(n);localStorage.setItem(r,e)}loadFromStorage(r){const n=localStorage.getItem(r);return n?JSON.parse(n):null}}const l=c.getInstance();function A(r=6){for(var n="",e=0;e<r;e++)n+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return n}class d{constructor(){this.listeners=[]}addListener(r){this.listeners.push(r)}}class u extends d{constructor(){super(),this.tasks=[],this.STORAGE_KEY="tasksDB",this.demoTasks=[{id:A(),title:"Create your first task",description:"Check it out!",priority:1,status:o.Active,createdAt:Date.now()}]}static getInstance(){return this.instance||(this.instance=new u),this.instance}query(){this.tasks=l.loadFromStorage(this.STORAGE_KEY),this.tasks&&this.tasks.length||(this.tasks=this.demoTasks,this.updateTaskStorage(this.tasks)),this.updateListeners()}addTask(r){r.id||(r.id=A()),this.tasks.push(r),this.updateListeners(),t.renderMessage("Task Added Successfully"),this.updateTaskStorage(this.tasks)}deleteTask(r){const n=this.tasks.findIndex((n=>n.id===r));this.tasks.splice(n,1),this.updateListeners(),t.renderMessage("Task Removed Successfully"),this.updateTaskStorage(this.tasks)}moveTask(r,n){const e=this.tasks.find((n=>n.id===r));e&&e.status!==n&&(e.status=n,this.updateListeners(),this.updateTaskStorage(this.tasks))}updateListeners(){for(const r of this.listeners)r(this.tasks.slice())}updateTaskStorage(r){l.saveToStorage(this.STORAGE_KEY,r)}}const p=u.getInstance();class m{constructor(r,n,e){this.enteredTitle=r,this.enteredDescription=n,this.enteredpriority=e,this.titleValidatable={field:"title",value:this.enteredTitle,isRequired:!0},this.descriptionValidatable={field:"description",value:this.enteredDescription,isRequired:!0,minLength:5},this.priorityValidatable={field:"priority",value:this.enteredpriority,isRequired:!0,min:1,max:5}}}class h extends r{constructor(){super("task-input","task-form-wraper",!0,"user-input"),this.titleInputEl=this.element.querySelector("#title"),this.descriptionInputEl=this.element.querySelector("#description"),this.priorityInputEl=this.element.querySelector("#priority"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}gatherUserInput(){const r=this.titleInputEl.value,n=this.descriptionInputEl.value,e=+this.priorityInputEl.value,t=new m(r,n,e),{titleValidatable:a,descriptionValidatable:c,priorityValidatable:l}=t;if(s(a)&&s(c)&&s(l))return this.clearInputs(),new i(r,n,e,o.Active,Date.now())}clearInputs(){this.titleInputEl.value="",this.descriptionInputEl.value="",this.priorityInputEl.value=""}submitHandler(r){r.preventDefault();const n=this.gatherUserInput();n&&p.addTask(n)}renderContent(){}}!function(r,n,e,t){var s,a=arguments.length,o=a<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,e):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(r,n,e,t);else for(var i=r.length-1;i>=0;i--)(s=r[i])&&(o=(a<3?s(o):a>3?s(n,e,o):s(n,e))||o);a>3&&o&&Object.defineProperty(n,e,o)}([a],h.prototype,"submitHandler",null);class f extends r{constructor(r,n){super("single-task",r,!1,n.id),this.task=n,this.configure(),this.renderContent()}dragStartHandler(r){r.dataTransfer.setData("text/plain",this.task.id),r.dataTransfer.effectAllowed="move"}configure(){document.getElementById("delete-btn").id=`delete-btn-${this.task.id}`,document.getElementById(`delete-btn-${this.task.id}`).onclick=()=>this.onDeleteTask(this.task.id),this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){var r;this.element.querySelector("h3").textContent=this.task.title,this.element.querySelector("h4").textContent="Priority: "+this.task.priority,this.element.querySelector("h5").textContent=(r=this.task.createdAt,`${new Date(r).toDateString()} at ${new Date(r).getHours()}:${new Date(r).getMinutes()}`),this.element.querySelector("p").textContent=this.task.description}onDeleteTask(r){p.deleteTask(r)}dragEndHandler(r){}}!function(r,n,e,t){var s,a=arguments.length,o=a<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,e):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(r,n,e,t);else for(var i=r.length-1;i>=0;i--)(s=r[i])&&(o=(a<3?s(o):a>3?s(n,e,o):s(n,e))||o);a>3&&o&&Object.defineProperty(n,e,o)}([a],f.prototype,"dragStartHandler",null);var g=function(r,n,e,t){var s,a=arguments.length,o=a<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,e):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(r,n,e,t);else for(var i=r.length-1;i>=0;i--)(s=r[i])&&(o=(a<3?s(o):a>3?s(n,e,o):s(n,e))||o);return a>3&&o&&Object.defineProperty(n,e,o),o};class C extends r{constructor(r){super("task-list","lists-wraper",!1,`${r}-tasks`),this.type=r,this.assignedTasks=[],this.sortBy="",this.configure(),this.renderContent(),p.query()}dragOverHandler(r){r.dataTransfer&&"text/plain"===r.dataTransfer.types[0]&&(r.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(r){const n=r.dataTransfer.getData("text/plain");p.moveTask(n,"active"===this.type?o.Active:o.Done);const e=document.querySelectorAll("ul");for(const r of e)r.classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler);const r=document.getElementById("sortby");r.id=`sortby-${this.type}`,this.sortBy=r.value,r.addEventListener("change",(()=>this.handleSortbyChange(r.value))),p.addListener(this.renderFilterdTasks)}renderContent(){const r=`${this.type}-task-list`;this.element.querySelector("ul").id=r,this.element.querySelector("h2").textContent=this.type.toUpperCase()}renderFilterdTasks(r){const n=r.filter((r=>"active"===this.type?r.status===o.Active:r.status===o.Done));this.assignedTasks=n,this.renderTasks()}renderTasks(){document.getElementById(`${this.type}-task-list`).innerHTML="";const r=this.assignedTasks.sort(((r,n)=>"priority"===this.sortBy?r.priority-n.priority:n.createdAt-r.createdAt));for(const n of r)new f(this.element.querySelector("ul").id,n)}handleSortbyChange(r){this.sortBy=r,this.renderTasks()}dragLeaveHandler(r){}}g([a],C.prototype,"dragOverHandler",null),g([a],C.prototype,"dropHandler",null),g([a],C.prototype,"renderFilterdTasks",null);var v=e(379),B=e.n(v),E=e(795),b=e.n(E),y=e(569),k=e.n(y),x=e(565),I=e.n(x),w=e(216),S=e.n(w),T=e(589),L=e.n(T),R=e(150),j={};j.styleTagTransform=L(),j.setAttributes=I(),j.insert=k().bind(null,"head"),j.domAPI=b(),j.insertStyleElement=S(),B()(R.Z,j),R.Z&&R.Z.locals&&R.Z.locals,console.log("app.ts Working"),new h,new C("active"),new C("done")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,